<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\User;

class TestWithdrawal extends Command
{
    protected $signature = 'withdrawal:test {user_id}';
    protected $description = 'Test withdrawal requirements for a user';

    public function handle()
    {
        $userId = $this->argument('user_id');
        $user = User::find($userId);
        
        if (!$user) {
            $this->error("User with ID {$userId} not found.");
            return;
        }

        $this->info("Testing withdrawal requirements for: {$user->name}");
        $this->newLine();
        
        $this->line("‚úÖ Has deposited: " . ($user->has_deposited ? 'Yes' : 'No'));
        $this->line("üí∞ Balance: $" . number_format($user->balance, 2));
        $this->line("üë• Referrals: {$user->referrals_count}");
        $this->line("üìä Level: {$user->level}");
        $this->line("üîí Can withdraw: " . ($user->canWithdraw() ? 'Yes' : 'No'));
        
        $this->newLine();
        
        // Check individual requirements
        $this->line("Individual Requirements:");
        $this->line("- Minimum balance ($10): " . ($user->balance >= 10 ? '‚úÖ' : '‚ùå'));
        $this->line("- Referral requirement: " . ($user->meetsReferralRequirementForWithdrawal() ? '‚úÖ' : '‚ùå'));
        $this->line("- Monthly quota: " . ($user->withinMonthlyWithdrawalQuota() ? '‚úÖ' : '‚ùå'));
        $this->line("- Initial deposit: " . ($user->has_deposited ? '‚úÖ' : '‚ùå'));
        
        $this->newLine();
        
        if ($user->canWithdraw()) {
            $this->info("üéâ User can make withdrawal requests!");
        } else {
            $this->warn("‚ö†Ô∏è  User cannot withdraw - requirements not met.");
        }
    }
}
